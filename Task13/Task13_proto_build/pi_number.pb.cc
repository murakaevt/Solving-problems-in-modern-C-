// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pi_number.proto

#include "pi_number.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace pi_proto {
PROTOBUF_CONSTEXPR Pi::Pi(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nilakantha_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.input_number_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PiDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PiDefaultTypeInternal() {}
  union {
    Pi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PiDefaultTypeInternal _Pi_default_instance_;
PROTOBUF_CONSTEXPR ContainerPi::ContainerPi(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_pi_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContainerPiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerPiDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerPiDefaultTypeInternal() {}
  union {
    ContainerPi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerPiDefaultTypeInternal _ContainerPi_default_instance_;
}  // namespace pi_proto
static ::_pb::Metadata file_level_metadata_pi_5fnumber_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_pi_5fnumber_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_pi_5fnumber_2eproto = nullptr;

const uint32_t TableStruct_pi_5fnumber_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pi_proto::Pi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pi_proto::Pi, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::pi_proto::Pi, _impl_.nilakantha_),
  PROTOBUF_FIELD_OFFSET(::pi_proto::Pi, _impl_.input_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pi_proto::ContainerPi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::pi_proto::ContainerPi, _impl_.all_pi_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::pi_proto::Pi)},
  { 9, -1, -1, sizeof(::pi_proto::ContainerPi)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::pi_proto::_Pi_default_instance_._instance,
  &::pi_proto::_ContainerPi_default_instance_._instance,
};

const char descriptor_table_protodef_pi_5fnumber_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017pi_number.proto\022\010pi_proto\032\020nilakantha."
  "proto\"S\n\002Pi\022\r\n\005value\030\001 \001(\001\022(\n\nnilakantha"
  "\030\002 \001(\0132\024.pi_proto.Nilakantha\022\024\n\014input_nu"
  "mber\030\003 \001(\004\"+\n\013ContainerPi\022\034\n\006all_pi\030\001 \003("
  "\0132\014.pi_proto.Pib\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_pi_5fnumber_2eproto_deps[1] = {
  &::descriptor_table_nilakantha_2eproto,
};
static ::_pbi::once_flag descriptor_table_pi_5fnumber_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_pi_5fnumber_2eproto = {
    false, false, 183, descriptor_table_protodef_pi_5fnumber_2eproto,
    "pi_number.proto",
    &descriptor_table_pi_5fnumber_2eproto_once, descriptor_table_pi_5fnumber_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_pi_5fnumber_2eproto::offsets,
    file_level_metadata_pi_5fnumber_2eproto, file_level_enum_descriptors_pi_5fnumber_2eproto,
    file_level_service_descriptors_pi_5fnumber_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_pi_5fnumber_2eproto_getter() {
  return &descriptor_table_pi_5fnumber_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_pi_5fnumber_2eproto(&descriptor_table_pi_5fnumber_2eproto);
namespace pi_proto {

// ===================================================================

class Pi::_Internal {
 public:
  static const ::pi_proto::Nilakantha& nilakantha(const Pi* msg);
};

const ::pi_proto::Nilakantha&
Pi::_Internal::nilakantha(const Pi* msg) {
  return *msg->_impl_.nilakantha_;
}
void Pi::clear_nilakantha() {
  if (GetArenaForAllocation() == nullptr && _impl_.nilakantha_ != nullptr) {
    delete _impl_.nilakantha_;
  }
  _impl_.nilakantha_ = nullptr;
}
Pi::Pi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pi_proto.Pi)
}
Pi::Pi(const Pi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pi* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nilakantha_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.input_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_nilakantha()) {
    _this->_impl_.nilakantha_ = new ::pi_proto::Nilakantha(*from._impl_.nilakantha_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.input_number_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.input_number_));
  // @@protoc_insertion_point(copy_constructor:pi_proto.Pi)
}

inline void Pi::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nilakantha_){nullptr}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.input_number_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pi::~Pi() {
  // @@protoc_insertion_point(destructor:pi_proto.Pi)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.nilakantha_;
}

void Pi::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pi::Clear() {
// @@protoc_insertion_point(message_clear_start:pi_proto.Pi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.nilakantha_ != nullptr) {
    delete _impl_.nilakantha_;
  }
  _impl_.nilakantha_ = nullptr;
  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.input_number_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.input_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pi::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .pi_proto.Nilakantha nilakantha = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_nilakantha(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 input_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.input_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pi_proto.Pi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // .pi_proto.Nilakantha nilakantha = 2;
  if (this->_internal_has_nilakantha()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::nilakantha(this),
        _Internal::nilakantha(this).GetCachedSize(), target, stream);
  }

  // uint64 input_number = 3;
  if (this->_internal_input_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_input_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pi_proto.Pi)
  return target;
}

size_t Pi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pi_proto.Pi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pi_proto.Nilakantha nilakantha = 2;
  if (this->_internal_has_nilakantha()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nilakantha_);
  }

  // double value = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  // uint64 input_number = 3;
  if (this->_internal_input_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_input_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pi::GetClassData() const { return &_class_data_; }


void Pi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pi*>(&to_msg);
  auto& from = static_cast<const Pi&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pi_proto.Pi)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nilakantha()) {
    _this->_internal_mutable_nilakantha()->::pi_proto::Nilakantha::MergeFrom(
        from._internal_nilakantha());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_input_number() != 0) {
    _this->_internal_set_input_number(from._internal_input_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pi::CopyFrom(const Pi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pi_proto.Pi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pi::IsInitialized() const {
  return true;
}

void Pi::InternalSwap(Pi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pi, _impl_.input_number_)
      + sizeof(Pi::_impl_.input_number_)
      - PROTOBUF_FIELD_OFFSET(Pi, _impl_.nilakantha_)>(
          reinterpret_cast<char*>(&_impl_.nilakantha_),
          reinterpret_cast<char*>(&other->_impl_.nilakantha_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pi::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pi_5fnumber_2eproto_getter, &descriptor_table_pi_5fnumber_2eproto_once,
      file_level_metadata_pi_5fnumber_2eproto[0]);
}

// ===================================================================

class ContainerPi::_Internal {
 public:
};

ContainerPi::ContainerPi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:pi_proto.ContainerPi)
}
ContainerPi::ContainerPi(const ContainerPi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContainerPi* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_pi_){from._impl_.all_pi_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pi_proto.ContainerPi)
}

inline void ContainerPi::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.all_pi_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContainerPi::~ContainerPi() {
  // @@protoc_insertion_point(destructor:pi_proto.ContainerPi)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerPi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.all_pi_.~RepeatedPtrField();
}

void ContainerPi::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerPi::Clear() {
// @@protoc_insertion_point(message_clear_start:pi_proto.ContainerPi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.all_pi_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerPi::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pi_proto.Pi all_pi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_pi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContainerPi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pi_proto.ContainerPi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pi_proto.Pi all_pi = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_pi_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_pi(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pi_proto.ContainerPi)
  return target;
}

size_t ContainerPi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pi_proto.ContainerPi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pi_proto.Pi all_pi = 1;
  total_size += 1UL * this->_internal_all_pi_size();
  for (const auto& msg : this->_impl_.all_pi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerPi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContainerPi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerPi::GetClassData() const { return &_class_data_; }


void ContainerPi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContainerPi*>(&to_msg);
  auto& from = static_cast<const ContainerPi&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:pi_proto.ContainerPi)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.all_pi_.MergeFrom(from._impl_.all_pi_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerPi::CopyFrom(const ContainerPi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pi_proto.ContainerPi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerPi::IsInitialized() const {
  return true;
}

void ContainerPi::InternalSwap(ContainerPi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.all_pi_.InternalSwap(&other->_impl_.all_pi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerPi::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_pi_5fnumber_2eproto_getter, &descriptor_table_pi_5fnumber_2eproto_once,
      file_level_metadata_pi_5fnumber_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace pi_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pi_proto::Pi*
Arena::CreateMaybeMessage< ::pi_proto::Pi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pi_proto::Pi >(arena);
}
template<> PROTOBUF_NOINLINE ::pi_proto::ContainerPi*
Arena::CreateMaybeMessage< ::pi_proto::ContainerPi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pi_proto::ContainerPi >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
